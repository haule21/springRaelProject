package com.example.rael.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.event.TableColumnModelListener;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.rael.dto.ProductAllSelectDTO;
import com.example.rael.dto.ProductCategoryDTO;
import com.example.rael.dto.ProductDTO;
import com.example.rael.dto.ProductDetailDTO;
import com.example.rael.dto.SearchDTO;
import com.example.rael.paging.PagingResponse;
import com.example.rael.service.ProductCategoryService;
import com.example.rael.service.ProductService;

@Controller
@RequestMapping("/product")
public class ProductController {
	
	// CATEGORY LINE --------------------------------------------------------------------------
	@Autowired
	ProductCategoryService productCategoryService;
	
	@Autowired
	ProductService productService;
	
	
	@RequestMapping("/category_insert")
	public ModelAndView Category_Insert(@RequestParam(value = "insertresult", required=false, defaultValue="0") int result,
										@RequestParam(value="categoryBox", required=false, defaultValue="defaultValue") String category) {
		
		if(result == 1) {
			ModelAndView mv = new ModelAndView();
			mv.addObject("insertresult", result);
			mv.setViewName("product/category_insert");
			return mv;
		}
		else {
			ModelAndView mv = new ModelAndView();
			mv.setViewName("product/category_insert");
			return mv;
		}
	}
	
	@RequestMapping(value = "/category_insert/INSERT", method = RequestMethod.POST)
	public String Category_Insert_Sumit( 		@RequestParam("productcategory num") int num, 
												@RequestParam("productcategory name") String name,
												RedirectAttributes re) {
		
		ProductCategoryDTO insertdatas = new ProductCategoryDTO();
		insertdatas.setPRODUCTCATEGORYNUM(num);
		insertdatas.setPRODUCTCATEGORYNAME(name);
		int result = productCategoryService.InsertCategory(insertdatas);
		if(num % 10 != 0) {
			Map<String, String> map = new HashMap<String,String>();
			map.put("insertnum", Integer.toString(num));
			productCategoryService.CreateCategorySEQ(map);
		}
		re.addFlashAttribute("insertresult", result >  0 ? 1 : 0);
		return "redirect:/product/category_insert";
	}
	
	@RequestMapping("/category_update")
	public String Category_Update(	@ModelAttribute("param") SearchDTO param, 
									Model model,
									@RequestParam(value="categoryBox", required=false, defaultValue="defaultValue") String category) {
		PagingResponse<ProductCategoryDTO> CategoryDatas = productCategoryService.SelectCategory(param);
		List<String> CategoryHead = productCategoryService.SelectHeadCategory();
		
		if(category.equals("defaultValue")) {
		}
		else {
			String[] temp_categorydatas = category.split("/", 2);
			int temp_categorynum = Integer.parseInt(temp_categorydatas[0]);
			
			param.setCategorynum(temp_categorynum);
		}
		
		model.addAttribute("categorynums", CategoryHead);
		model.addAttribute("datas", CategoryDatas);
		model.addAttribute("categoryBox", category);
		
		return "product/category_update";
	}
	
	@RequestMapping(value = "/category_update/UPDATE", method = RequestMethod.POST)
	public String Category_Update_Sumit( 	@RequestParam("product category num for modify") int[] num,
											@RequestParam("product category name for modify") String[] name,
											RedirectAttributes re) {
		
		ProductCategoryDTO updatedatas = new ProductCategoryDTO();
		int result = 0;
		for(int i=0; i<num.length; i++) {
			updatedatas.setPRODUCTCATEGORYNUM(num[i]);
			updatedatas.setPRODUCTCATEGORYNAME(name[i]);
			String tempPRODUCTCATEGORYNAME = productCategoryService.SelectForUpdate(num[i]);
			if(tempPRODUCTCATEGORYNAME == name[i]) {
				continue;
			}
			else {
				result = productCategoryService.UpdateCategory(updatedatas);
			}
		}
		re.addFlashAttribute("updateresult", result > 0 ? 1 : 0);
		return "redirect:/product/category_update";
	}

	@RequestMapping("/category_select")
	public String Category_Select(	@ModelAttribute("param") SearchDTO param, 
									Model model,
									@RequestParam(value="categoryBox", required=false, defaultValue="defaultValue") String category) {
		if(category.equals("defaultValue")) {
		}
		else {
			String[] temp_categorydatas = category.split("/", 2);
			int temp_categorynum = Integer.parseInt(temp_categorydatas[0]);
			
			param.setCategorynum(temp_categorynum);
		}
		PagingResponse<ProductCategoryDTO> CategoryDatas = productCategoryService.SelectCategory(param);
		List<String> CategoryHead = productCategoryService.SelectHeadCategory();
		
		model.addAttribute("categorynums", CategoryHead);
		model.addAttribute("datas", CategoryDatas);
		model.addAttribute("categoryBox", category);
		
		
		return "product/category_select";
	}
	
	// PRODUCT LINE --------------------------------------------------------------------------
	
	@RequestMapping("/all_select")
	public String Product_All_Select(	@ModelAttribute("param") SearchDTO param, 
										Model model,
										@RequestParam(value = "categoryBox", required=false, defaultValue="defaultValue") String category) {
		
		if(category.equals("defaultValue")) {
		}
		else {
			String[] temp_categorydatas = category.split("/", 2);
			int temp_categorynum = Integer.parseInt(temp_categorydatas[0]);
			
			param.setCategorynum(temp_categorynum);
		}
		
		PagingResponse<ProductAllSelectDTO> AllDatas = productService.SelectAllProduct(param);
		int allcount = productService.AllCount(param);
		List<String> categorynums = productService.SelectCategoryNums();
		model.addAttribute("categoryBox", category);
		model.addAttribute("datas", AllDatas);
		model.addAttribute("categorynums", categorynums);
		model.addAttribute("allcount", allcount);
		model.addAttribute("shownumber", param.getPage() * param.getRecordSize());
		
		return "product/all_select";
	}
	
	@RequestMapping("/product_insert")
	public ModelAndView Product_Insert(	@RequestParam("categoryBox1") String selected) {
		ModelAndView mv = new ModelAndView();
		
		if("defaultValue".equals(selected)) {
			mv.setViewName("redirect:/main");
		}
		else {
			HashMap<String, Integer> categorydata = new HashMap<String, Integer>();
			HashMap<String,Object> productdata = new HashMap<String,Object>();
			
			String[] temp_categorydatas = selected.split("/", 2);
			int temp_categorynum = Integer.parseInt(temp_categorydatas[0]);
			
			categorydata.put("categorynum", temp_categorynum);
			String ProductNum = productService.SelectProductNumSEQ(categorydata);
			
			
			productdata.put("categorynum", temp_categorynum);
			productdata.put("productnum", ProductNum);
			
			int DetailLastByNum = productService.SelectProductDetailLastByNumber(productdata);
			mv.addObject("productnum", ProductNum);
			mv.addObject("detaillastbynum", DetailLastByNum);
			mv.addObject("categorynum", temp_categorynum);
			mv.addObject("categoryname", temp_categorydatas[1]);
			mv.setViewName("product/product_insert");
		}
			
		
		return mv;
	}
	
	@RequestMapping("/product_insert/INSERT")
	public String Product_Insert_Submit(RedirectAttributes re,
										@RequestParam("product category num") int categorynum,
										@RequestParam("product num") String productnum,
										@RequestParam("product detail num") int productbynum,
										@RequestParam("product name") String productname,
										@RequestParam("product inbound price") int productpriceinbound,
										@RequestParam("product outbound price") int productpriceoutbound,
										@RequestParam("product vendor") String productvendor,
										@RequestParam("product company") String productcompany,
										@RequestParam("product color") String productcolor,
										@RequestParam("product length") String productlength,
										@RequestParam("product weight") String productweight,
										@RequestParam("product battery") String productbattery,
										@RequestParam("product description") String productdescription) {
		
		ProductDTO productDTO = new ProductDTO();
		ProductDetailDTO productDetailDTO = new ProductDetailDTO();
		
		productDTO.setPRODUCTCATEGORYNUM(categorynum);
		productDTO.setPRODUCTNUM(productnum);
		productDTO.setPRODUCTNAME(productname);
		
		productDetailDTO.setPRODUCTCOLOR(productcolor);
		productDetailDTO.setPRODUCTCOMPANY(productcompany);
		productDetailDTO.setPRODUCTDESCRIPTION(productdescription);
		productDetailDTO.setPRODUCTLENGTH(productlength);
		productDetailDTO.setPRODUCTPRICEINBOUND(productpriceinbound);
		productDetailDTO.setPRODUCTPRICEOUTBOUND(productpriceoutbound);
		productDetailDTO.setPRODUCTVENDOR(productvendor);
		productDetailDTO.setPRODUCTVOLT(productbattery);
		productDetailDTO.setPRODUCTWEIGHT(productweight);
		
		productService.InsertProduct(productDTO);
		int result = productService.InsertProductDetail(productnum, productbynum, productDetailDTO);
		re.addFlashAttribute("insertresult", result >  0 ? 1 : 0);
		
		return "redirect:/main";
	}
	
	@RequestMapping("/product_insert_detail")
	public ModelAndView Product_Detail_Insert(@RequestParam("categoryBox2") String selected ) {
		
		ModelAndView mv = new ModelAndView();
		
		if("defaultValue".equals(selected)) {
			mv.setViewName("redirect:/main");
		}
		else {
			String[] temp_categorydatas = selected.split("/", 2);
			int temp_categorynum = Integer.parseInt(temp_categorydatas[0]);
			
			List<String> productData = productService.SelectProductNames(temp_categorynum);
			List<String> productDatas = new ArrayList<String>();
			HashMap<String,Object> productdata = new HashMap<String,Object>();
			
			
			for(int i=0; i<productData.size(); i++) {
				String temp = productData.get(i);
				String[] temp_array = temp.split("/" , 2);
				String temp_integer = temp_array[0]; 
				
				productdata.put("categorynum", temp_categorynum);
				productdata.put("productnum", temp_integer);
				// temp_array[0] productnum ,temp_array[1] productname ,  
				productDatas.add(
					temp_array[0]+" / "
					+temp_array[1]+" / "
					+String.valueOf(
							productService.SelectProductDetailLastByNumber(productdata)
					)
				);
				productdata.clear();
			}
			
			mv.addObject("productdatas", productDatas);
			mv.setViewName("product/product_insert_detail");
		}
			
		return mv;
	}
	
	
	@RequestMapping("/product_insert_detail/INSERT")
	public ModelAndView Product_Detail_Insert_Submit(	RedirectAttributes re,
														@RequestParam("productBox") String selected,
														@RequestParam("product inbound price") int productpriceinbound,
														@RequestParam("product outbound price") int productpriceoutbound,
														@RequestParam("product vendor") String productvendor,
														@RequestParam("product company") String productcompany,
														@RequestParam("product color") String productcolor,
														@RequestParam("product length") String productlength,
														@RequestParam("product weight") String productweight,
														@RequestParam("product battery") String productbattery,
														@RequestParam("product description") String productdescription) {
		ModelAndView mv = new ModelAndView();
		
		if("defaultValue".equals(selected)) {
			
			
			re.addFlashAttribute("insertresult", 0);
			mv.setViewName("redirect:/product/product_insert_detail");
			
			return mv;
		}
		
		else {
			String[] temp = selected.split(" / ", 3);
			
			String productNum = temp[0];
			int productByNum = Integer.parseInt(temp[2]);
			
			ProductDetailDTO productDetailDTO = new ProductDetailDTO();
			
			productDetailDTO.setPRODUCTCOLOR(productcolor);
			productDetailDTO.setPRODUCTCOMPANY(productcompany);
			productDetailDTO.setPRODUCTDESCRIPTION(productdescription);
			productDetailDTO.setPRODUCTLENGTH(productlength);
			productDetailDTO.setPRODUCTPRICEINBOUND(productpriceinbound);
			productDetailDTO.setPRODUCTPRICEOUTBOUND(productpriceoutbound);
			productDetailDTO.setPRODUCTVENDOR(productvendor);
			productDetailDTO.setPRODUCTVOLT(productbattery);
			productDetailDTO.setPRODUCTWEIGHT(productweight);
			
			
			int result = productService.InsertProductDetail(productNum, productByNum, productDetailDTO);
			re.addFlashAttribute("insertresult", result);
			mv.setViewName("redirect:/main");
			
			return mv;
		}
		
		
	}
	
	@RequestMapping("/product_update")
	public ModelAndView Product_Update(	@RequestParam("categoryBox3") String selected,
										@ModelAttribute("param") SearchDTO searchDTO,
										RedirectAttributes re) {
		ModelAndView mv = new ModelAndView();
		if("defaultValue".equals(selected)) {
			mv.setViewName("redirect:/main");
		}
		else {
			String[] temp_categorydatas = selected.split("/", 2);
			int temp_categorynum = Integer.parseInt(temp_categorydatas[0]);
			PagingResponse<ProductDTO> productDatas = productService.SelectProduct(searchDTO, temp_categorynum);
			mv.addObject("datas", productDatas);
			mv.addObject("categoryBox",selected);
			mv.setViewName("/product/product_update");
		}
		return mv;
	}
	@RequestMapping("/product_update/{num}")
	public ModelAndView Product_Update_(@PathVariable("num") String num) {
		ModelAndView mv = new ModelAndView();
		ProductDTO data = productService.SelectProductROW(num);
		mv.addObject("data", data);
		mv.setViewName("product/product_update_modifypage");

		return mv;
	}
	@RequestMapping("/product_update_detail")
	public ModelAndView Product_Update_Detail(	@RequestParam("categoryBox") String selected,	
												@ModelAttribute("param") SearchDTO searchDTO,
												RedirectAttributes re) {
		ModelAndView mv = new ModelAndView();
		if("defaultValue".equals(selected)) {
			mv.setViewName("redirect:/main");
		}
		else {
			String[] temp_categorydatas = selected.split("/", 2);
			int temp_categorynum = Integer.parseInt(temp_categorydatas[0]);
			PagingResponse<ProductAllSelectDTO> productDatas = productService.SelectProductDetail(searchDTO, temp_categorynum);
			mv.addObject("datas", productDatas);
			mv.addObject("categoryBox",selected);
			mv.setViewName("/product/product_update_detail");
		}

		return mv;
	}
	@RequestMapping("/product_update_detail/{num}/{num2}")
	public ModelAndView Product_Detail_Update_(	@RequestParam("categoryBox") String selected,
												@PathVariable("num") String num,
												@PathVariable("num2") int num2,
												RedirectAttributes re) {
		ModelAndView mv = new ModelAndView();
		HashMap<String, Object> productdata = new HashMap<String, Object>();
		productdata.put("productnum", num);
		productdata.put("productbynum", num2);
		
		ProductAllSelectDTO data = productService.SelectProductDetailROW(productdata);
		mv.addObject("data", data);
		mv.addObject("categoryBox", selected);
		mv.setViewName("product/product_update_detail_modifypage");
		
		return mv;
	}
	
	@RequestMapping("/product_update/UPDATE")
	public ModelAndView Product_Update_Submit(	@RequestParam("categoryBox") String selected,
												@RequestParam("product num for modify") String productNum,
												@RequestParam("product name for modify") String productName,
												RedirectAttributes re) {
		ModelAndView mv = new ModelAndView();
		
		
		int result = productService.UpdateProduct(productNum, productName);
		mv.addObject("categoryBox", selected);
		re.addFlashAttribute("updateresult", result == 1 ? 1 : 0);
		mv.setViewName("redirect:/product/product_update");
		return mv;
	}
	@RequestMapping("/product_update_detail/UPDATE")
	public ModelAndView Product_Update_Detail_Submit(	@RequestParam("categoryBox") String selected,
														@RequestParam("product num for modify") String productNum,
														@RequestParam("product by num for modify") int productByNum,
														@RequestParam("product vendor for modify") String productVendor,
														@RequestParam("product company for modify") String productCompany,
														@RequestParam("product color for modify") String productColor,
														@RequestParam("product price inbound for modify") int productPriceInbound,
														@RequestParam("product price outbound for modify") int productPriceOutbound,
														@RequestParam("product length for modify") String productLength,
														@RequestParam("product weight for modify") String productWeight,
														@RequestParam("product volt for modify") String productVolt,
														@RequestParam("product description for modify") String productDescription,
														RedirectAttributes re) {
		ModelAndView mv = new ModelAndView();
		
		ProductDetailDTO productdata = new ProductDetailDTO();
		productdata.setPRODUCTVENDOR(productVendor);
		productdata.setPRODUCTCOMPANY(productCompany);
		productdata.setPRODUCTCOLOR(productColor);
		productdata.setPRODUCTPRICEINBOUND(productPriceInbound);
		productdata.setPRODUCTPRICEOUTBOUND(productPriceOutbound);
		productdata.setPRODUCTLENGTH(productLength);
		productdata.setPRODUCTWEIGHT(productWeight);
		productdata.setPRODUCTVOLT(productVolt);
		productdata.setPRODUCTDESCRIPTION(productDescription);
		
		int result = productService.UpdateProductDetail(productNum, productByNum, productdata);
		
		re.addFlashAttribute("updateresult", result == 1 ? 1 : 0);
		mv.addObject("categoryBox", selected);
		mv.setViewName("redirect:/product/product_update_detail");
		
		return mv;
	}
	
	
	
	
	
}
