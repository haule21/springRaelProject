package com.example.rael.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import com.example.rael.security.AuthFailureHandler;
import com.example.rael.security.AuthSuccessHandler;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@EnableWebSecurity
@Configuration
public class SecurityConfig{
	
	private final AuthSuccessHandler authSuccessHandler;
	private final AuthFailureHandler authFailureHandler;
	
	// configure SecurityFilterChain
	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		http
			.authorizeRequests()
				.mvcMatchers("/login").permitAll().anyRequest().authenticated();
		
		http
			.formLogin()
				.loginPage("/login").loginProcessingUrl("/loginProc").successHandler(authSuccessHandler).failureHandler(authFailureHandler)
				.usernameParameter("id").passwordParameter("pw").defaultSuccessUrl("/").successForwardUrl("/")
				.failureForwardUrl("/login").and()
			.logout()
				.logoutRequestMatcher(new AntPathRequestMatcher("/logout"));
		
		http.sessionManagement()
			.maximumSessions(1)
			.maxSessionsPreventsLogin(false)
			.expiredUrl("/login");

		return http.build();
	}

}
