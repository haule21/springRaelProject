package com.example.rael.config;

import javax.sql.DataSource;

import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.Resource;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.web.filter.CharacterEncodingFilter;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

@Configuration
@ComponentScan(basePackages={"com.example.rael"})
@MapperScan(basePackages={"com.example.rael.mapper"})
public class RootConfig {
	
	@Autowired
    private ApplicationContext applicationContext;
	
	@Bean
	public DataSource dataSource() {
		HikariConfig hikariConfig = new HikariConfig();
		hikariConfig.setDriverClassName("oracle.jdbc.driver.OracleDriver");
		hikariConfig.setJdbcUrl("jdbc:oracle:thin:@localhost:1521/rael");
		hikariConfig.setUsername("test_user");
		hikariConfig.setPassword("haul2");
		
		HikariDataSource dataSource = new HikariDataSource(hikariConfig);
		return dataSource;
	}
	
	@Bean
    public SqlSessionFactory sqlSessionFactory() throws Exception {
        SqlSessionFactoryBean sessionFactoryBean = new SqlSessionFactoryBean();
        sessionFactoryBean.setDataSource(dataSource());

        Resource[] res = new PathMatchingResourcePatternResolver().getResources("classpath:mapper/*.xml");
        sessionFactoryBean.setMapperLocations(res);
        sessionFactoryBean.setConfigLocation(applicationContext.getResource("classpath:mybatis-config.xml"));
        return sessionFactoryBean.getObject();
    }
	 @Bean(destroyMethod = "")

	  public DataSource dataSource() throws IllegalArgumentException, NamingException {

	    JndiObjectFactoryBean bean = new JndiObjectFactoryBean();

	    bean.setJndiName(jndiName);

	    bean.setProxyInterface(DataSource.class);

	    bean.setLookupOnStartup(false);

	    bean.afterPropertiesSet();

	    return (DataSource) bean.getObject();

	  }

	â€‹
	@Bean
	public JdbcTemplate jdbcTemplate() throws IllegalArgumentException, NamingException {
			return new JdbcTemplate(dataSource());
	}
	
}